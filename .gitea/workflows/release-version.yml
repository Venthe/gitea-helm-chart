name: generate-chart

on:
  push:
    tags:
      - "*"

env:
  # renovate: datasource=github-releases depName=sigstore/cosign
  COSIGN_VERSION: "v2.2.4"

jobs:
  generate-chart-publish:
    runs-on: ubuntu-latest
    container: alpine/helm:3.15.3
    steps:
      - name: install tools
        run: |
          apk add --no-cache --update nodejs git curl ca-certificates gnupg aws-cli
          aws --version
          # cosign - the -L is important. Otherwise, the file would be empty.
          curl -O -L "https://github.com/sigstore/cosign/releases/download/${{ env.COSIGN_VERSION }}/cosign-linux-amd64"
          mv cosign-linux-amd64 /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign
          cosign version
      - uses: actions/checkout@v4

      - name: Import GPG key
        id: import_gpg
        uses: https://github.com/crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPGSIGN_KEY }}
          passphrase: ${{ secrets.GPGSIGN_PASSPHRASE }}
          fingerprint: CC64B1DB67ABBEECAB24B6455FC346329753F4B0

      - name: package chart
        env:
          GPGSIGN_KEY_NAME: "Teabot"
        run: |
          # https://github.com/helm/helm/issues/2843#issuecomment-1462927026
          gpg --export-secret-keys > ~/.gnupg/secring.gpg

          helm dependency build
          helm package --sign --key "${GPGSIGN_KEY_NAME}" --keyring ~/.gnupg/secring.gpg --version "${GITHUB_REF#refs/tags/v}" ./
          mkdir gitea
          mv gitea-${GITHUB_REF#refs/tags/v}.tgz* gitea/
          curl -s -L -o gitea/index.yaml https://dl.gitea.com/charts/index.yaml
          helm repo index gitea/ --url https://dl.gitea.com/charts --merge gitea/index.yaml

      - name: aws credential configure
        uses: https://github.com/aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy files to S3 and clear cache
        run: |
          aws s3 sync gitea/ s3://${{ secrets.AWS_S3_BUCKET}}/charts/

      - name: Push to DockerHub
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
        shell: bash
        run: |
          set -o pipefail
          echo "${{ secrets.COSIGN_KEY }}" > /tmp/cosign.key

          # We have to login to two different endpoints:
          #   - index.docker.io: Used by "helm push"
          #   - registry-1.docker.io: Used by "cosign sign"
          echo ${{ secrets.DOCKER_CHARTS_PASSWORD }} | helm registry login https://index.docker.io/v1/ -u ${{ secrets.DOCKER_CHARTS_USERNAME }} --password-stdin
          echo ${{ secrets.DOCKER_CHARTS_PASSWORD }} | helm registry login https://registry-1.docker.io/v2/ -u ${{ secrets.DOCKER_CHARTS_USERNAME }} --password-stdin

          helm push gitea/gitea-${GITHUB_REF#refs/tags/v}.tgz "oci://registry-1.docker.io/${{ secrets.DOCKER_CHARTS_USERNAME }}" 2>&1 | tee /tmp/oci-metadata.txt

          # Cosign relies on the native Docker config.json location. As we don't want to install Docker solely for `docker login`, we simply copy the authentication file to the right location :)
          mkdir -p ~/.docker/
          cp $(helm env HELM_REGISTRY_CONFIG) ~/.docker/

          # Build full artifact url including tag and digest, using /tmp/oci-metadata.txt that contains something like:
          #   Pushed: registry-1.docker.io/<username>/gitea:<tag>
          #   Digest: <digest>
          cosign sign --key /tmp/cosign.key --yes "$(grep -F 'Pushed' /tmp/oci-metadata.txt | cut -d ' ' -f2)@$(grep -F 'Digest' /tmp/oci-metadata.txt | cut -d ' ' -f2)"

          # Cleanup authentication files
          rm $(helm env HELM_REGISTRY_CONFIG)
          rm -rf ~/.docker/
          rm /tmp/cosign.key /tmp/oci-metadata.txt
